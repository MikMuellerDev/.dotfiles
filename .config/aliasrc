#!/bin/bash

alias tmux='tmux -2'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -v'
alias ip='ip -c'
alias cl='clear'

# Laptop aliases
alias mirrscreen='xrandr --output HDMI-1 --auto --same-as eDP-1'

# SSH aliases
alias sss='ssh cloud'
alias ss8='ssh s8'
alias con='ssh contabo'
alias ssp='ssh pi-rack'
alias sspr='ssh pi_room'
alias ssr='ssh redripper'
alias ss2='ssh cloud2'
alias ssb='ssh pi_box'

# Go development
alias gotest='richgo test -v -race ./...'
alias gorun='richgo run -v -race .'

# Smarthome development
alias mdev='make vite-dev'
alias mrun='make run'
alias mrel='make release'
alias mtes='make test'
alias shdb='docker exec -it smarthome-mariadb  mysql -u root -p'
alias shtdb='docker exec -it smarthome-mariadb-testing mysql -u root -p'

if command -v exa > /dev/null; then
    alias l='exa -lahg --icons --octal-permissions --git'
else
    alias l='ls -lAh --color=auto'
fi

command -v pixterm > /dev/null && alias li='pixterm -fa'

updaterc () {
    pwd="$(pwd)"
    cd ~/.dotfiles || {
        echo 'The .dotfiles folder should be at ~/.dotfiles to auto update'
        return 2
    }
    git pull
    ./install.sh
    cd "$pwd" || return 2
    # Reload shell
    exec "$SHELL"
}
editrc () {
    [ -d "$HOME/.dotfiles" ] || {
        echo 'No .dotfiles folder at ~/.dotfiles'
        return 2
    }
    editor="$EDITOR"
    [ -n "$EDITOR" ] || editor=vim
    $editor ~/.dotfiles/.zshrc
}

upd () {
    # Package manager
    pwd="$(pwd)"
    if [ "$(uname -o)" = "Android" ]; then
        pkg upgrade
    elif command -v apt > /dev/null; then
        sudo apt update
        sudo apt upgrade
        sudo apt autoremove
        sudo apt autoclean
    else
        paru -Syu
    fi

    # Cargo packages
    cargo_pkg_list=()
    while IFS='' read -r line; do cargo_pkg_list+=("$line"); done < <(cargo install --list | grep -E '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
    if [ "${#cargo_pkg_list[@]}" -ne 0 ]; then
        cargo install "${cargo_pkg_list[@]}"
    fi
    unset cargo_pkg_list

    # Rust toolchains
    command -v rustup > /dev/null && rustup update

    # Go on Debian
    if command -v godeb > /dev/null; then
        [ "$(go version | grep -Po '\d+\.\d+\.\d+')" = "$(godeb list | grep -P '^\d+\.\d+\.\d+$' | tail -n 1)" ] || \
            godeb install "$(godeb list | grep -P '^\d+\.\d+\.\d+$' | tail -n 1)"
    fi

    # dotfiles
    updaterc

    # Oh-my-zsh plugins and themes
    pwd="$(pwd)"
    for d in "$ZSH_CUSTOM"/*/*; do
        [ ! -d "$d" ] || cd "$d" || return 2
        git pull
    done
    cd "$pwd" || return 2
}

command -v xclip >/dev/null && { alias setclip='xclip -selection c'; alias getclip='xclip -selection c -o'; }
command -v wl-copy >/dev/null && { alias setclip='wl-copy'; alias getclip='wl-paste'; }

alias root='sudo su -'
alias con='ssh contabo'
command -v poof > /dev/null || alias poof='poweroff'
alias pubip='curl ipinfo.io/ip'
alias ipa='ip -br a'
alias sctl='sudo systemctl'
alias sr='screen -r'
alias sls='screen -ls'

_paru_bin="$(command -v paru)"
paru () {
    (
        unset CARGO_TARGET_DIR
        unset GOPATH
        $_paru_bin "$@"
    )
}

godotvim () {
    [ "$(basename "$(pwd)")" = "src" ] || cd src || return 1
    [ -e godothost ] && rm godothost > /dev/null
    nvim --listen godothost .
    [ -e godothost ] && rm godothost > /dev/null
}

lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        # shellcheck disable=SC2164
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

rewg () {
    systemctl is-active wg-quick@wg0 > /dev/null && {
        sudo systemctl restart wg-quick@wg0
        return 0
    }
    systemctl is-active wg-quick@wg1 > /dev/null && {
        sudo systemctl restart wg-quick@wg1
        return 0
    }
    echo "No known wg service is running"
    return 3
}
alias wg0='sudo systemctl stop wg-quick@wg1; sudo systemctl start wg-quick@wg0'
alias wg1='sudo systemctl stop wg-quick@wg0; sudo systemctl start wg-quick@wg1'
alias stopwg='sudo systemctl stop wg-quick@wg0; sudo systemctl stop wg-quick@wg1'

cheat () { curl -s "cheat.sh/$1" | less; }

colors () {
    zsh -c '
    for i in {0..255}; do
        print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'"'"'\n'"'"'}
    done'
}

postclip () {
    getclip | quick-clip set -i
}

fetchclip () {
    quick-clip get -o | setclip
}
